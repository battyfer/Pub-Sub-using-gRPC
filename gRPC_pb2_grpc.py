# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import gRPC_pb2 as gRPC__pb2


class Registry_Server_ServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/article.Registry_Server_Service/Register',
                request_serializer=gRPC__pb2.Server.SerializeToString,
                response_deserializer=gRPC__pb2.Registry_Response.FromString,
                )
        self.GetServerList = channel.unary_stream(
                '/article.Registry_Server_Service/GetServerList',
                request_serializer=gRPC__pb2.Registry_Server.SerializeToString,
                response_deserializer=gRPC__pb2.Server_with_Address.FromString,
                )


class Registry_Server_ServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServerList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Registry_Server_ServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=gRPC__pb2.Server.FromString,
                    response_serializer=gRPC__pb2.Registry_Response.SerializeToString,
            ),
            'GetServerList': grpc.unary_stream_rpc_method_handler(
                    servicer.GetServerList,
                    request_deserializer=gRPC__pb2.Registry_Server.FromString,
                    response_serializer=gRPC__pb2.Server_with_Address.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'article.Registry_Server_Service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Registry_Server_Service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/article.Registry_Server_Service/Register',
            gRPC__pb2.Server.SerializeToString,
            gRPC__pb2.Registry_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServerList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/article.Registry_Server_Service/GetServerList',
            gRPC__pb2.Registry_Server.SerializeToString,
            gRPC__pb2.Server_with_Address.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class Server_ServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.JoinServer = channel.unary_unary(
                '/article.Server_Service/JoinServer',
                request_serializer=gRPC__pb2.Client.SerializeToString,
                response_deserializer=gRPC__pb2.Server_Response.FromString,
                )
        self.LeaveServer = channel.unary_unary(
                '/article.Server_Service/LeaveServer',
                request_serializer=gRPC__pb2.Client.SerializeToString,
                response_deserializer=gRPC__pb2.Server_Response.FromString,
                )
        self.GetArticles = channel.unary_stream(
                '/article.Server_Service/GetArticles',
                request_serializer=gRPC__pb2.Article_Client.SerializeToString,
                response_deserializer=gRPC__pb2.Article_List.FromString,
                )
        self.PublishArticle = channel.unary_unary(
                '/article.Server_Service/PublishArticle',
                request_serializer=gRPC__pb2.Article_Client.SerializeToString,
                response_deserializer=gRPC__pb2.Article_Response.FromString,
                )


class Server_ServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def JoinServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LeaveServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetArticles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishArticle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Server_ServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'JoinServer': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinServer,
                    request_deserializer=gRPC__pb2.Client.FromString,
                    response_serializer=gRPC__pb2.Server_Response.SerializeToString,
            ),
            'LeaveServer': grpc.unary_unary_rpc_method_handler(
                    servicer.LeaveServer,
                    request_deserializer=gRPC__pb2.Client.FromString,
                    response_serializer=gRPC__pb2.Server_Response.SerializeToString,
            ),
            'GetArticles': grpc.unary_stream_rpc_method_handler(
                    servicer.GetArticles,
                    request_deserializer=gRPC__pb2.Article_Client.FromString,
                    response_serializer=gRPC__pb2.Article_List.SerializeToString,
            ),
            'PublishArticle': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishArticle,
                    request_deserializer=gRPC__pb2.Article_Client.FromString,
                    response_serializer=gRPC__pb2.Article_Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'article.Server_Service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Server_Service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def JoinServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/article.Server_Service/JoinServer',
            gRPC__pb2.Client.SerializeToString,
            gRPC__pb2.Server_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LeaveServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/article.Server_Service/LeaveServer',
            gRPC__pb2.Client.SerializeToString,
            gRPC__pb2.Server_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetArticles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/article.Server_Service/GetArticles',
            gRPC__pb2.Article_Client.SerializeToString,
            gRPC__pb2.Article_List.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishArticle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/article.Server_Service/PublishArticle',
            gRPC__pb2.Article_Client.SerializeToString,
            gRPC__pb2.Article_Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class Article_ServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetArticle = channel.unary_unary(
                '/article.Article_Service/GetArticle',
                request_serializer=gRPC__pb2.Article_Request.SerializeToString,
                response_deserializer=gRPC__pb2.Article.FromString,
                )


class Article_ServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetArticle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Article_ServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetArticle': grpc.unary_unary_rpc_method_handler(
                    servicer.GetArticle,
                    request_deserializer=gRPC__pb2.Article_Request.FromString,
                    response_serializer=gRPC__pb2.Article.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'article.Article_Service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Article_Service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetArticle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/article.Article_Service/GetArticle',
            gRPC__pb2.Article_Request.SerializeToString,
            gRPC__pb2.Article.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
